// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// se crean los modelos de las tablas de la base de datos
// cada vez que se realice un cambio en la base de datos hay que realizar una migracion

// aca se especifica que el todo va a tener solo un usuario y que el identificador es el Id
model Todo {
  id          String   @id @default(uuid())
  description String
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User   @relation(fields: [userId], references: [id])
  userId      String
}

// Auth.js

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// se crean nuevos campos en el usaurio como roles y isActive
// se agrega password para los usuarios de la aplicacion

// se crea las relaciones de usuario con todos para decir que un usuario puede tener muchos todos
// pero un todo solo puede tener un usuario
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts      Account[]
  sessions      Session[]

  todos         Todo[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
